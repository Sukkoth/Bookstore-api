generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

generator jsonSchema {
  provider                 = "prisma-json-schema-generator"
  keepRelationScalarFields = "true"
  includeRequiredFields    = "true"
  persistOriginalType      = "true"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admins {
  id        Int       @id @default(autoincrement())
  firstName String
  lastName  String
  email     String
  password  String
  phone     String
  location  String    @db.VarChar(255)
  status    String    @default("active") @db.VarChar(255)
  createdAt DateTime  @default(now()) @db.Timestamp(0)
  updatedAt DateTime? @default(now()) @db.Timestamp(0)
  roleId    Int
  role      Roles     @relation(fields: [roleId], references: [id])

  @@index([roleId], map: "admins_roleid_index")
}

model Books {
  id         Int            @id @default(autoincrement())
  name       String
  authorName String
  categoryId Int
  createdAt  DateTime       @default(now()) @db.Timestamp(0)
  updatedAt  DateTime?      @default(now()) @db.Timestamp(0)
  info       OwnerToBooks[]

  category Categories @relation(fields: [categoryId], references: [id])
}

model Categories {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now()) @db.Timestamp(0)
  updatedAt DateTime? @default(now()) @db.Timestamp(0)

  books Books[]
}

model OwnerToBooks {
  id        Int       @id @default(autoincrement())
  quantity  Int       @default(1)
  price     Float     @default(0)
  cover     String
  bookId    Int
  ownerId   Int
  status    String    @default("free") @db.VarChar(255)
  approved  Boolean   @default(false)
  createdAt DateTime  @default(now()) @db.Timestamp(0)
  updatedAt DateTime? @default(now()) @db.Timestamp(0)
  bookInfo  Books     @relation(fields: [bookId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "owner_to_book_bookid_foreign")
  owner     Owners    @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "owner_to_book_ownerid_foreign")
  rentals   Rentals[]

  @@index([bookId], map: "owner_to_book_bookid_index")
  @@index([ownerId], map: "owner_to_book_ownerid_index")
}

model Owners {
  id        Int            @id @default(autoincrement())
  firstName String
  lastName  String
  email     String
  password  String
  phone     String
  location  String         @db.VarChar(255)
  status    String         @default("active") @db.VarChar(255)
  approved  Boolean        @default(false)
  createdAt DateTime       @default(now()) @db.Timestamp(0)
  updatedAt DateTime?      @default(now()) @db.Timestamp(0)
  roleId    Int
  books     OwnerToBooks[]
  wallet    Wallets[]
  role      Roles          @relation(fields: [roleId], references: [id])

  @@index([roleId], map: "owners_roleid_index")
}

model Rentals {
  id          Int           @id @default(autoincrement())
  rentBookId  Int
  userId      Int
  dueDate     DateTime      @db.Timestamp(0)
  quantity    Int           @default(1)
  returnedAt  DateTime?     @db.Timestamp(0)
  createdAt   DateTime      @default(now()) @db.Timestamp(0)
  updatedAt   DateTime?     @default(now()) @db.Timestamp(0)
  book        OwnerToBooks  @relation(fields: [rentBookId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "rentals_rentBookid_foreign")
  user        Users         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "rentals_userid_foreign")
  Transaction Transaction[]

  @@index([rentBookId], map: "rentals_bookid_index")
  @@index([userId], map: "rentals_userid_index")
}

model Users {
  id           Int           @id @default(autoincrement())
  firstName    String
  lastName     String
  email        String
  password     String
  phone        String
  location     String        @db.VarChar(255)
  status       String        @default("active") @db.VarChar(255)
  createdAt    DateTime      @default(now()) @db.Timestamp(0)
  updatedAt    DateTime?     @default(now()) @db.Timestamp(0)
  rentals      Rentals[]
  transactions Transaction[]
  roleId       Int
  role         Roles         @relation(fields: [roleId], references: [id])

  @@index([roleId], map: "users_roleid_index")
}

model Wallets {
  id        Int       @id @default(autoincrement())
  ownerId   Int       @unique
  balance   Float
  createdAt DateTime  @default(now()) @db.Timestamp(0)
  status    String    @default("active") @db.VarChar(255)
  updatedAt DateTime? @default(now()) @db.Timestamp(0)
  owner     Owners    @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "wallets_ownerid_foreign")

  @@index([ownerId], map: "wallets_ownerid_index")
}

model Transaction {
  id        Int      @id @default(autoincrement())
  amount    Float
  createdAt DateTime @default(now())
  userId    Int
  rentalId  Int

  rental Rentals @relation(fields: [rentalId], references: [id], onDelete: Cascade)
  user   Users   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "transaction_userid_index")
  @@index([rentalId], map: "transaction_rentalid_index")
}

model Roles {
  id                Int                 @id @default(autoincrement())
  name              String
  Admins            Admins[]
  Owners            Owners[]
  Users             Users[]
  roleToPermissions RoleToPermissions[]
}

model Permissions {
  id         Int    @id @default(autoincrement())
  subject    String
  action     String
  conditions Json?  @db.JsonB

  roleToPermissions RoleToPermissions[]
}

enum UserType {
  admin
  owner
  user
}

model RoleToPermissions {
  id Int @id @default(autoincrement())

  roleId       Int
  permissionId Int

  createdAt   DateTime    @default(now()) @db.Timestamp(0)
  updatedAt   DateTime?   @default(now()) @db.Timestamp(0)
  roles       Roles       @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "roles_roleid_foreign")
  permissions Permissions @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "permissions_permissionid_foreign")

  @@index([roleId], map: "role_to_permissions_roleid_index")
  @@index([permissionId], map: "role_to_permissions_permissionid_index")
}
