generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admins {
  id          Int       @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String
  password    String
  phone       String
  location    String    @db.VarChar(255)
  status      String    @default("active") @db.VarChar(255)
  permissions Json      @db.JsonB
  createdAt   DateTime  @default(now()) @db.Timestamp(0)
  updatedAt   DateTime? @default(now()) @db.Timestamp(0)
}

model Books {
  id         Int            @id @default(autoincrement())
  name       String
  authorName String
  categoryId Int
  createdAt  DateTime       @default(now()) @db.Timestamp(0)
  updatedAt  DateTime?      @default(now()) @db.Timestamp(0)
  info       OwnerToBooks[]

  category Categories @relation(fields: [categoryId], references: [id])
}

model Categories {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now()) @db.Timestamp(0)
  updatedAt DateTime? @default(now()) @db.Timestamp(0)

  books Books[]
}

model OwnerToBooks {
  id        Int       @id @default(autoincrement())
  quantity  Int       @default(1)
  price     Float     @default(0)
  cover     String
  bookId    Int
  ownerId   Int
  status    String    @default("free") @db.VarChar(255)
  createdAt DateTime  @default(now()) @db.Timestamp(0)
  updatedAt DateTime? @default(now()) @db.Timestamp(0)
  bookInfo  Books     @relation(fields: [bookId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "owner_to_book_bookid_foreign")
  owner     Owners    @relation(fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "owner_to_book_ownerid_foreign")
  rentals   Rentals[]

  @@index([bookId], map: "owner_to_book_bookid_index")
  @@index([ownerId], map: "owner_to_book_ownerid_index")
}

model Owners {
  id          Int            @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String
  password    String
  phone       String
  location    String         @db.VarChar(255)
  status      String         @default("inactive") @db.VarChar(255)
  approved    Boolean        @default(false)
  permissions Json           @db.JsonB
  createdAt   DateTime       @default(now()) @db.Timestamp(0)
  updatedAt   DateTime?      @default(now()) @db.Timestamp(0)
  books       OwnerToBooks[]
  wallet      Wallets[]
}

model Rentals {
  id         Int          @id @default(autoincrement())
  bookId     Int
  userId     Int
  dueDate    DateTime     @db.Timestamp(0)
  returnedAt DateTime     @db.Timestamp(0)
  createdAt  DateTime     @default(now()) @db.Timestamp(0)
  updatedAt  DateTime?    @default(now()) @db.Timestamp(0)
  book       OwnerToBooks @relation(fields: [bookId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "rentals_bookid_foreign")
  user       Users        @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "rentals_userid_foreign")

  @@index([bookId], map: "rentals_bookid_index")
  @@index([userId], map: "rentals_userid_index")
}

model Users {
  id        Int       @id @default(autoincrement())
  firstName String
  lastName  String
  email     String
  password  String
  phone     String
  location  String    @db.VarChar(255)
  status    String    @default("active") @db.VarChar(255)
  createdAt DateTime  @default(now()) @db.Timestamp(0)
  updatedAt DateTime? @default(now()) @db.Timestamp(0)
  rentals   Rentals[]
}

model Wallets {
  id        Int       @id @default(autoincrement())
  userId    Int
  balance   Float
  createdAt DateTime  @default(now()) @db.Timestamp(0)
  status    String    @default("active") @db.VarChar(255)
  cratedAt  DateTime  @default(now()) @db.Timestamp(0)
  updatedAt DateTime? @default(now()) @db.Timestamp(0)
  owner     Owners    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "wallets_userid_foreign")

  @@index([userId], map: "wallets_userid_index")
}

model Permissions {
  id   Int      @id @default(autoincrement())
  for  UserType @unique @default(admin)
  list Json     @db.JsonB
}

enum UserType {
  admin
  owner
  user
}
